관계형 데이터베이스 : 행, 열 (테이블)
mysql, db2, 
select 검색명령 
sql 쿼리 정형화된거
none sql 쿼리 비정형화된거
삽입 insert
delete update

데이터베이스->정보(추출,정제함)
추출 전:데이터 -> 추출 후:정보 (상대적 개념)

메타데이터 : 데이터의 데이터. 핵심데이터 제공.
데이터의 구조나 제약사항 등과 같은 속성이나 특성을
기술하는 것 - index

low 행
column 열. 컬럼의 제약사항:도메인-하나의 컬럼이 가질 수 있는 범위
도메인 ex: 젠더-남,여. 학년-1~6. 값의 집합, 범위를 가리킴.
한 속성이 가지는 값의 범위. "범위"라서 도메인은 제약사항을 갖고 있음. 

★식별자 : 프라이머리 키 PK - null값 없어야함, 중복되지 말아야함★
null : 길이를 갖지 않는 데이터, 데이터가 없는거. 
(공백은 null값이 아님)

index : 목차, 자료와 주소~

varchar : variable character 자릿수. 고정길이.
(10자리 세팅의 경우 7자리써도 3자리 공백으로해서 10자리 맞춤)

데이터베이스 : 특정 조직 내(업무의 관련성 있어야함)에서 다수의 사용자들이 공유할 수 있도록
통합시키고 컴퓨터 저장 장치에 저장시킨 운영 데이터의 집합

특성
-실시간 접근
-계속적인 변화 
-동시 공유 <-> stand alone 혼자쓰는 방식
-내용에 의한 참조

dbms : database management system
데이터를 통합적으로 관리하는 소프트웨어 시스템
ex. 오라클, mysql, sql server, 
오라클이 가장 안전함 대신 용량차지가 큼

트랜잭션 : 하나의 명령이 처리되어 실행되기까지의 과정
all or nothing. 하면 다 해야하고 안하려면 첨부터 안함.
트랜잭션의 연산은 데이터베이스에 모두 반영되든지 아니면 전혀 반영되지 않아야함.
실패하면 그 명령이 없었던 걸로.
commit : 트랜잭션이 끝났음을 알려주는 명령어
rollback : 아예 반영하지 않게 되돌리는 명령어(가장 최근 commit된 상태로 돌아감)
오류가 발생하면 트랜잭션 모두 취소.
고립성 : 변경은 완성 후 변경해야함. 
한 트랜잭션 안에 또다른 트랜잭션이 생겨선 안됨. 오류 발생.
트리거 : 자동으로 처리해줌. 


9/7
<관계형 데이터모델>
1. 개념적 모델링
테이블의 전 단계인 엔터티(행(=튜플)과 열)를 뽑아내야함, 어트리뷰트(컬럼=속성=열)도 뽑아내야함
엔터티-엔터티 사이의 릴레이션십도 뽑아내야함
그래서 개념적 모델링이 제일 어려움

2. 논리적 모델링
속성이 엔터티에 포함이 되는지 아닌지 결정을 함 (정규화 과정:제1정규화,제2정규화..제6정규화)
정규화과정을 거칠 때마다 테이블이 분할되어짐 
분할된 테이블들을 연결하는 관계들이 형성됨
엔터티->릴레이션십으로 이름이 바뀜

3. 물리적 모델링 
물리적 모델링을 거치면 릴레이션십=테이블, 어트리뷰트=컬럼, 튜플=행으로 명칭이 또 바뀜 

이렇게 3단계를 거쳐야 관계형 데이터모델로써의 테이블이 됨

현재 가장 많이 사용되는 데이터베이스 모델
2차원 테이블 구조로 되어있음. 행=로우, 열=컬럼
사용자가 데이터를 쉽게 다룰 수 있도록 질의어(SQL)를 제공함
structure qurry language
구조적 질의 언어

기억공간 : 변수 variable 


SELECT 절 : 보여질 열을 설정해줌 
SELECT, FROM, WHERE 이렇게 한 세트임
WHERE이 없는 경우도 가능함. 


*릴레이션
-테이블
-현실세계의 개체를 표현
-관계형 데이터베이스에서 정보를 구분하여 저장하는 기본 단위
-한 데이터베이스 안에서 테이블 명은 중복될 수 없음 
-한 테이블 안에 있는 속성 명도 중복될 수 없음
-A테이블과 B테이블 안의 속성 명은 중복 가능함

테이블은 1개 이상의 속성을 가져야함
하지만 튜플은 0개 이상의 속성 가능. 
열은 반드시 1개 이상 존재해야하지만, 튜플은 없어도 ㄱㅊ.
저장을 안시켰거나, 삭제시킨 경우.

*튜플=행
개체에 속한 구성원들 개개의 정보를 표현 (레코드)
EX. 학생은 개체를 나타내는 이름, 김철수, 안미영 등은 학생 개체의 구성원
한 릴레이션에 포함된 튜플의 개수는 시간에 따라 변할 수 있고, 한 릴레이션은 여러 개의 튜플을 포함할 수 있음


*속성=어트리뷰트
릴레이션에서 관리하는 구체적인 정보 항목
현실세계의 개체들은 많은 속성들을 갖는데, 그 중에서 관리해야 할 필요가 있는 속성들만을 선택하여 릴레이션에 포함시킴
해당 개체를 특징지을 수 있는 특성들의 집합.
모든 튜플들이 공통으로 가지는 값들의 집합. 
속성값들의 집합은 도메인.


*도메인
속성의 값들의 집합
필요한 이유 :저장되는 데이터 값들이 본래 의도했던 값들만 저장되고 관리되도록 하는데에 있음.
인덱스 : 찾아가는 길. 


릴레이션=파일=테이블
속성=필드=열,컬럼
튜플=레코드=행


*KEY
후보키 : candidate key 
기본 키가 되기 위해 선택되는 것들 - null값x, 중복x
PRIMARY KEY : 기본키
alternate key : 대체키 - 후보키 중 기본키를 대신할 수 있는 키

I.E. 표기법: 인포메이션 엔지니어링

복합키: 복수의 키로 기본키가 설정되는 경우
외래키:f.k. foreign key 부모테이블의 기본키가 자식테이블의 기본키가 되든지 속성이 되는 경우. (부모와 자식의 공통 값)
ex. 학생들 테이블에서 한 학생의 학과의 학과장을 찾는다 치면 
학생 테이블과 학과 테이블이 연결되어있고 "학과"는 외래키가 됨.
테이블끼리 관계가 맺어지면 외래키가 존재함.
외래키가 없는 경우 관계가 안맺어진거임.
외래키가 있으면 join 가능
부모 테이블의 pk가 자식 테이블의 fk가 됨

관계선 - 점선:비식별관계, 직선:식별관계
비식별관계 : 주종관계에서 주가 사라진다고 해서 종이 사라지지 않는 경우
식별관계 : 주종관계에서 주가 사라지면 종도 사라지는 경우 - 사원과 근무 관계

부모테이블과 자식테이블 사이 관계가 직선이면, 부모테이블 PK=자식테이블 PK. PK는 테이블의 맨 위에 작성. FK는 맨 밑에.



drop 객체를 없애는 것 - 부모 테이블 삭제
delete 객체 안의 데이터를 없애는 것 - 부모 테이블의 행 삭제
1. 관계를 끊으면 지울 수 있음
2. 자식테이블을 먼저 지우면 부모 테이블 삭제 : 리커시브. 재기.

참조무결성 : 자식테이블의 외래키를 추가하려면 부모테이블의 기본키 먼저 생성 후 외래키 내용 추가

SELECT 문을 실행해서 나오는 결과가 VIEW
인덱스 : 목차
-- 주석 (자바의 //랑 같은듯)
~ 틸드 : 자바에서 1의 보수 구할때
@ at 
& 앰퍼센드
* 아스트릭스 : all 전부 다
☆셀렉스 올~ 하면 -> select * 이렇게 하기!!!☆ =모든 컬럼을 다 가져와라

계정명 앞글자 무조건 영어로!
$, _ 이런건 대부분 테이블명칭이라 쓰지말기

오라클은 비번뺴고는 대소문자 구별 안함

새로운 유저 만들때는 항상 시스템 새로 만들고 테스트 한 뒤 접속!!!
-

뷰를 수정하면 원본도 바뀜 
그래서 뷰를 읽기 전용으로 바꾸거나 여러 제한사항을 둠

SQL 
- 대화식 SQL : DBMS 회사에서 제공하는 유틸리티프로그램을 이용해서 사용자가 직접 SQL문을 입력하고 실행결과를 확인하는 방식
- 내장 SQL : SQL문이 C, JAVA와 같은 프로그램 안에 포함되어져서 사용되는 방식


DA#5, DA#4, EXERD DB설계 모델링 도구

테이블 만들어지는 순서
1. 요구사항 분석
2. 데이터 모델링 - 개념적 모델링, 논리적 모델링, 물리적 모델링
3. 테이블 설계
4. DB 스키마 생성
정방향 : 포워드 엔지니어링
역방향 : 리버스 엔지니어링 (역공학)



9/8
UML unified modeling language
요구분석, 시스템설계, 시스템 구현 등의 시스템 개발 과정에서, 
개발자간의 의사소통을 원활하게 이루어지게 하기 위하여 표준화한 모델링 언어

13개로 구성된 다이어그램임. 자바같은 컴퓨터 언어가 아님.

다이어그램
-behavior 시간의 흐름을 가지고 시스템을 분석해서 그림을 그려냄
state chart,..

크레스 다이어그램같은 정적인거
시스템을 세워놓고 단면을 절단했을때 보여지는 상황을 그림

공통된 규칙을 갖는 그림을 그려서(약속기호) 개발자끼리 대화
스티브잡스가 젤 잘했음

유스케이스 다이어그램 : 타원형으로된 유스케이스가 있어야하고, 시스템의 기능을 나타내줌. 
유스케이스에서 정의되지 않은 건 프로그래머가 구현할 필요가 없음
유스케이스에 있는건 꼭 구현해야함. 안하면 계약위반임
검증 툴로 사용됨. 인스 테스트(인스톨 테스트)로 사용됨. 
기능을 전부 체크하며 판단함

 
캐디널리티 : 차수
부서 입장 : 부서 1개에 사원 여러명 - 1:多
사원 입장 : 사원 1명이 부서 1곳 - 1:1 
1:1, 
1:多 
多:多 = 상품과 회원의 관계, 양쪽이 각각 1:多의 관계면 전체로 봤을때 多:多임 
-> 개념적 모델링에서만 허용되고, 논리적 모델링에서는 허용이 안되므로
논리적 모델링에서 사용하려면 1:多, 1:多로 바꿔서 사용해야함. -> 릴레이션으로 바꿔라!

ex. 회원이 상품을 구매하다
명사는 속성=어트리뷰트,엔터티=테이블이 됨=회원, 상품
동사는 관계가 됨=구매하다

요구사항 분석 시
특정 단어마다 각 언급한 것들끼리 다 모아둠
관계가 되려면 동사1개와 명사2개이상이 있어야함
ex. 사원은 (사원번호, 사원명, 주소, 전화번호, 직급, 부서명)의 속성을 갖는다. ->관계x, 어트리뷰트o, PK 후보키 있음-사원번호

ex. 사업장의 비고는 공사중과 공사완료로 구분한다. -> 모 아니면 도. 배타적 관계.

슈퍼타입과 서브타입
사원은 정규직, 계약직, 일용직 등으로 다양화되어있음
사원=슈퍼타입=전체집합
정규직, 계약직, 일용직=서브타입=부분집합

개념적 모델링에서 추출해야할 3가지
개체-엔터티, 속성-언트리뷰트, 관계-릴레이션십

ER-다이어그램 (엔터티-릴레이션십-다이어그램)
데이터모델링을 마인드맵처럼 구조화시킴
사각형:엔터티
마름모:릴레이션십
타원형:어트리뷰트. 타원형 밑에 타원형은 안됨. 
주소는 예외. - 주소는 기본주소/상세주소로 나뉘어있음.

사원이 근무하는 사업장을 확인할 수 있으며, 한명의 사업장은 일정 기간동안 한 사업장에만 근무할 수 있고,
그 이후에는 다른 사업장에 갈 수 있다. -> 사원:사업장=1:多, 사업장:사원=1:多 -> 多:多 
"한명의 사업장은 일정 기간동안 한 사업장에만 근무할 수 있고" 에 농락당하면 안됨!! 

모든 엔터티는 릴레이션으로 운영함

숫자-NUMBER, 문자열-고정길이(CHAR), 가변길이(VARCHAR2)

NULL값은 사칙연산해도 항상 NULL !!



09/09
테이블은 항상 부모테이블 먼저 만들고 자식 테이블 만들기


사원과 사업장 테이블은 외래키가 없음
사업장 자재 테이블은 사업장 테이블의 자식 테이블
근무는 사원과 사업장의 자식테이블

사원 <-근무 
발이 붙어있는게 자식~
점선은 부모의 기본키가 자식의 일반 컬럼이 되는거고
직선은 부모의 기본키가 자식의 기본키가 됨



9/13
BUYPROD : 매입
-BUYDATE : 매입날짜
- BUYPROD : 매입상품코드
- BUYQTY : 매입수량
- BUYCOST : 매입단가 <- 필요없음

COST 매입단가
PRICE 매출단가
SALE 할인판매단가 

단가는 한 군데에서만 관리해야함 (PROD)
같은 상품에 대한 여러 단가를 중복관리하면 수정하기가 힘듦


CART : 매출
CART MEMBER : 회원번호
CART NO : CHAR (13 BYTE) - 8글자는 날짜, 5글자 순번. (하루에 99999명 가능)
회원이 로그인 하는 순간 부여되는 고유번호~
cart no에 +1 가능. cart no가 문자열이긴 해도 오라클이 숫자위주라 자동형변환됨
sequence : 자동으로 1씩 증가시키는 명령어



BUYER : 공급처


LPROD 분류코드 : 가장 상위에 있음. 면류, 소스류, 주방용품류~,,
- 분류 편하게 하기 위해서. 매출집계 용이하게 내기 위해서.
LPROD_ ID: 순번(1번부터 차례대로 부여된 번호) 다른 곳들처럼 pk가 아님.
LPROD_GU:코드값(분류코드) =PK. 
LPROD_NM:분류코드명

PROD 상품
PROD ID 상품번호
CART, BUY의 부모테이블. 
LGU LPROD 자식
PROD BUYER : 이름 잘못 씀. BUYER_ID로 변경해야됨
PROD LGU : 이름 잘못 씀. LPROD_GU 로 변경해야됨 
(부모-자식 사이 캐치가 안됨)
OUTLINE 대략적인 설명
DETAIL 상세설명
IMG 이미지
TOTALSTOCK 전체재고량
PROPERSTOCK 특정기간 해당품목에 대한 매출 계산
PROPERSTOCK - TOTALSTOCK = 자동발주 (-이나 0이 아니면)
UNIT 판매수량 
PROD_MILEAGE 하나의 상품이 팔렸을때 회원에게 부여되는 마일리지



HR 계정
MANAGER_ID 부서장 아이디



MEMBER : 회원 -가장 많이 사용되는 데이터 
MEM_ID : 회원 아이디 PK ★
MEM_REGN01: 주민번호 앞자리 6자리
MEM-REGN02: 주민번호 뒷자리 7자리
MEM_BIR: 생년월일
MEM_ADD1:회원 기본주소★
MEM_ADD2:회원 상세주소★
MEM_MEMORIAL : 기념일 종류
MEM_MEMORIAL DAY : 기념 날짜
MEM_MILEAGE : 적립포인트 ★


1.요구사항 수집
2.설명문을 단문으로 잘라서 같은거 설명하고 있는 거끼리 모으기
3.


엔터티->릴레이션->테이블
관계도 테이블로 만들어야 함
외래키가 기본키인 경우 식별
외래키가 기본키는 아닌경우 비식별
기본키가 늘어나는 경우 
조건절이 그 기본키 값만큼 와야함
할아버지->아버지를 비식별로 두면 부모키를 상속받아도 할아버지키는 상속 안받아도 되니까
식별 비식별 잘 구분하기

일대일 관계는 하나의 테이블이라고 생각하고
복잡해서 분할해둔거라 생각하기

다중값 속성은 릴레이션으로 바꾸기 : 제1정규화

샘플데이터 집어넣어서 테스트하고 진행하기
(입력,삭제,변경 지장없는지 확인)


복합속성 : 기본주소 
상세속성 : 상세주소
단순속성만 릴레이션 컬럽으로 변환하기


일대다에서는 일이 부모, 다가 자식



포워드 엔지니어링 : 물리, 논리 -> SQL 코드 나옴 
리버스 엔지니어링 : SQL 코드로 물리, 논리 구조 그림

주문서 1개에 결제서 1개 - > 1:1관계


제1정규화에서는 새로 만들어지는 테이블이 자식테이블ㅇ인데
제2정규화부터는 새로 만들어지는  테이블은 다 부모테이블임





