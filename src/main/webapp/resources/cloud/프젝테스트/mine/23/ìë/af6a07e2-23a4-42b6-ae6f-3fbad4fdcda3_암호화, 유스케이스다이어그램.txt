암호화

양방향 - 암호화한 데이터를 원래 데이터로 복원할 수 있는 방식
목적 - 암호화 후 원래 데이터로 복원해야 데이터 활용가능한 경우



단방향 - 암호화시켰지만 원래 데이터로 복원하지 못하는 방식
목적 - 복원을 안시켜도, 암호화된 데이터를 가지고도 일처리하는데에
문제가 없을 때 사용 


암호화시키기 위해 특정 값과 섞어서 사용하는데
특정 값을 key값이라고 함. 
대칭key : 암호화할 때 사용하는 key와 복원key가 같은 경우
암호화에 사용한 key값은 공개되면 안되기 때문에 비공개key라고 함.
속도가 빠르지만, 대칭키로 암호화한 경우 key값이 노출되었을때 위험하다.
DES, AES 암호화 알고리즘 이름.
des : 암호화하던 초창기의 방식, 오랫동안 사용해왔지만 암호화가 풀릴 위험성이 존재해서
새롭게 만들어진게 aes. 

비대칭key : 암호화에 사용된 key와 복원key가 다른 경우
ex. 1번 key로 암호화 한 것은 2번 key로 복원함
둘 중 하나만 공개한다. 데이터를 암호화시켜거 보낼 사람한테 
key 전달.  -> 공개key라고 함.
두 key의 값이 다르기 때문에 비대칭 key라고 한다.
둘 중 한 key만 공개가 되더라도 암호화 풀릴 위험성이 낮다.
하지만 두 가지의 key가 서로 연관성이 깊어야 암호화와 복호화가 가능하기 
떄문에 속도가 느리다.

Xor 연산 : 값이 같으면 0. 다르면 1.


회원관리 예제 프로그램에 데이터를 암호화하는 기능을 추가해보자.
1) 회원 ID는 DB에 저장할 때는 양방향 암호화방식으로 
암호화해서 저장하고, 화면에 출력할 때는 원래의 데이터로 복원하여 출력한다.
2) 회원 비밀번호는 단방향 암호화 방식으로 암호화하여 저장한다.

유스케이스 다이어그램
외부에서 봤을 때 시스템의 기능을 그림으로 표현한다.

유스케이스 명세서 (유스케이스 내부에 대한 기술을 나타낸다.)
# 유스케이스명 : 회원가입
# 액터명 : 고객(비회원)
# 유스케이스 개요 및 설명 : 고객이 쇼핑몰 시스템을 사용하기 위해
		          회원가입을 하는 유스케이스
# 사전조건 : 고객이 회원 가입이 되어있지 않아야 한다.
# 이벤트 흐름 
 - 정상 흐름 :
	1. 회원 가입 요청을 한다. (액터)
	2. 회원 약관을 보여준다.(시스템)
	3. 회원 약관에 동의한다. (액터)
	4. 회원 정보 입력항목을 보여준다. (시스템)
	5. 회원ID가 중복되는지 여부를 확인한다. 
	6. 나머지 회원 정보 항목(이름, 전화번호, 주소,..)을 입력 후 등록 요청한다. (액터)
	7. 입력된 정보를 확인한다.(시스템)
	8. 회원 정보를 DB시스템에 저장하고 완료한다.(시스템)

 - 선택 흐름 : 
	3-1. 회원 약관에 동의하지 않으면 회원 가입 불가의 오류메시지를 출력하고 동의를 재요청한다.
	5-1. 회원 ID가 중복되면 '중복된 ID입니다' 라는 오류 메시지를 출력하고, 새로운 회원 ID를 입력받아서 확인한다.
	7-1. 회원 정보 중 입력됟지 않은 항목이 있는 경우 오류 메시지를 출력하고,
	      재입력을 요구한다.
	7-2. 이메일 주소가 형식에 맞지 않으면 오류메시지를 출력하고, 재입력을 요구한다.


클래스 다이어그램 : 클래스 사이의 관계를 그림
멤버변수 작성법
접근제한자 변수명 : 데이터타입 = default값
private String name; -> -name : String
public int age = 20; -> +age : int = 20

메서드 작성법
접근제한자 메서드명(파라미터 목록) : 반환값 타입
public int sum(int x, int y) { } -> +sum(x:int, y:int) : int


class A {
 A(C c){
 this.c = c;
}

}

class B {


}

class C {


}


↓aggregation 집합관계
a클래스를 삭제해도 c클래스까지 같이 삭제되지 않음!
class D {
C c = new C();
A a = new A(C c);
}

싱글톤은 나 자신을 변수로 만들고, 나 자신을 초기화시키기 때문에
나 자신에게 컴포지션 해줘야 한다.

dao를 service가 가져다가 쓰는데, dao
