package kr.or.ddit.reservation.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.MapUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.reservation.service.MtrService;
import kr.or.ddit.reservation.vo.MtrRsvtVO;
import kr.or.ddit.user.controller.LoginController;


@Controller
public class MtrController {
	
	private static final Logger logger = 
			LoggerFactory.getLogger(MtrController.class);
	
	@Autowired
	MtrService mtrService;
	
	//Get방식 예약페이지 연결
	@GetMapping("/mtr.do")
	public String meetingRoom() {
		return "reservation/mtrReservation";
	}
	
	//해당일 예약정보 보내기
	@PostMapping("/resSelect.do")
	public @ResponseBody List<Map<String,Object>> resSelect(@RequestParam HashMap<String, Object> params) {
		//받은 날짜 확인
		logger.info("rsvt_ymd : {}", params);
		
		//받은 날짜
		String rsvtYmd = MapUtils.getString(params, "rsvt_ymd");
		System.out.println(rsvtYmd);
		
		//해당일 예약정보 조회
		List<Map<String,Object>> mtrRsvtList = this.mtrService.todayRes(rsvtYmd);
		
		if(mtrRsvtList==null) {
			System.out.println("srList : null");
		}else{
			logger.info("mtrRsvtList :"+mtrRsvtList.toString());
		}
		return mtrRsvtList;
	}
	
	//예약하기
	@PostMapping("/resInsert.do")
	@ResponseBody
	public Map<String,Object> resInsert(@RequestParam HashMap<String, Object> params) {
		//받은 예약정보(mtrNo,mbrId,rsvtStrtHr,rsvtYmd) 확인
		logger.info("res : "+params);
		
		//변수에 분류
		int mtrNo = MapUtils.getInteger(params, "mtrNo");
		String mbrId = MapUtils.getString(params, "mbrId");
		String rsvtStrtHr = MapUtils.getString(params, "rsvtStrtHr");
		String rsvtYmd = MapUtils.getString(params, "rsvtYmd");
		
		//VO에 담기
		MtrRsvtVO resVO = new MtrRsvtVO();
		resVO.setMtrNo(mtrNo);
		resVO.setMbrId(mbrId);
		resVO.setRsvtStrtHr(rsvtStrtHr);
		resVO.setRsvtYmd(rsvtYmd);
		
		//DB에 저장
		int res = this.mtrService.resInsert(resVO);
		
		if(res>=1) {
			System.out.println("성공");
			Map<String, Object> result = new HashMap<>();
			result.put("sta", "success");
			return result;
		}else {
			Map<String,Object> result = new HashMap<>();
			result.put("sta", "fail");
			return result;
		}
	}
	
	//예약 취소
	@RequestMapping(value = "resDelete.do", method = RequestMethod.POST)
	@ResponseBody
	public Map<String, Object> resDelete(@RequestParam HashMap<String, Object> params) {
		
		//받은 예약정보(mtrNo,mbrId,rsvtStrtHr,rsvtYmd) 확인
		logger.info("res : "+params);
		
		//변수에 분류
		int mtrNo = MapUtils.getInteger(params, "mtrNo");
		String mbrId = MapUtils.getString(params, "mbrId");
		String rsvtStrtHr = MapUtils.getString(params, "rsvtStrtHr");
		String rsvtYmd = MapUtils.getString(params, "rsvtYmd");
		
		//VO에 담기
		MtrRsvtVO resVO = new MtrRsvtVO();
		resVO.setMtrNo(mtrNo);
		resVO.setMbrId(mbrId);
		resVO.setRsvtStrtHr(rsvtStrtHr);
		resVO.setRsvtYmd(rsvtYmd);
		
		//해당 예약정보 조회
		MtrRsvtVO mrVO = this.mtrService.resSelectOne(resVO);
		
		if(mrVO==null) {
			System.out.println("예약정보없음");
			Map<String, Object> result = new HashMap<>();
			result.put("sta", "noResData");
			return result;
		}else {
			int res = this.mtrService.resDelete(resVO);
			
			if(res>=1) {
				System.out.println("예약취소 성공");
				Map<String, Object> result = new HashMap<>();
				result.put("sta", "success");
				return result;
			}else {
				Map<String,Object> result = new HashMap<>();
				result.put("sta", "fail");
				return result;
			}//else
		}//else
	}
}
