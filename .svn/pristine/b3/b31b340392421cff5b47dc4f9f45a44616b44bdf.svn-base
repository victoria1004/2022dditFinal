package kr.or.ddit.user.controller;

import java.io.File;
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.SecureRandom;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.collections4.MapUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.user.service.LoginService;
import kr.or.ddit.user.service.MailService;
import kr.or.ddit.user.service.MbrService;
import kr.or.ddit.user.vo.MemberVO;
import kr.or.ddit.util.LogCrud;

@Controller
public class MemberController {

	private static final Logger logger = 
			LoggerFactory.getLogger(LoginController.class);
	
	@Autowired
	MbrService mbrService;
	
	@Autowired
	LoginController loginController;

	
	//id중복검사
	@RequestMapping(value = "/checkId.do")
	//     @ResponseBody Object to Json 프로토콜로 변경
	public @ResponseBody int checkId(@RequestParam HashMap<String, Object> params) {
		//받은 데이터 확인
		logger.info("mbrId : {}", params);
		
		String mbrId = MapUtils.getString(params, "mbrId");
		//동일 아이디 수 세기
		int result = mbrService.checkId(mbrId);
		
		return result;
	}
	
	
	//회원등록
	@RequestMapping(value = "/mbrinsert.do", method = RequestMethod.POST)
	public @ResponseBody Map<String, Object> mbrInsert(MemberVO memberVO, HttpServletRequest request, Model model) throws Exception {
		
		//받은 데이터 확인
		logger.info("MemberVO : "+memberVO.toString());
		
		//업로드한 파일 객체(배열)
		MultipartFile[] mbrProfile = memberVO.getMbrProfile();
		
		//파일명 처리(UUID 사용)
		//UUID:동일한 이름으로 업로드되면 기존 파일을 지우게 되므로 이를 방지하기위해 사용
		UUID uuid = UUID.randomUUID();
		String mbrImg = uuid.toString() + "-" + mbrProfile[0].getOriginalFilename();
		System.out.println(mbrImg);
		
		//파일 저장 경로 설정
		String mbrImgPath = "D:\\A_TeachingMaterial\\7.LastProject\\workspace\\doIT\\src\\main\\webapp\\resources\\profileImage";
		
		//비밀번호 암호화
		String memberPw = memberVO.getMbrPw();
		String encMemberPw = loginController.getSHA256(memberPw);
		logger.info(encMemberPw);
				
		//VO에 세팅(회원구분 포함)
		memberVO.setMbrImgPath(mbrImgPath);
		memberVO.setMbrCtgrCd("M03");
		memberVO.setMbrNm(new String(memberVO.getMbrNm().getBytes("8859_1"), "UTF-8"));
		logger.info("memberName : "+memberVO.getMbrNm());
		memberVO.setMbrImg(mbrImg);
		memberVO.setMbrPw(encMemberPw);
		
		//파일 생성
		File saveFile = new File(mbrImgPath,mbrImg);
		
		//파일 업로드
		try {
			mbrProfile[0].transferTo(saveFile);
		}catch (Exception e) {
			logger.info(e.getMessage());
		}
		
		//insert할 정보 확인
		logger.info("MemberVO : "+memberVO.toString());
		
		//insert처리
		int insertResult = mbrService.mbrInsert(memberVO);
		LogCrud.getCreate("LoginController");
		System.out.println(insertResult);
		if (insertResult>0) { //고객 등록 성공
			System.out.println("성공");
			Map<String, Object> result = new HashMap<>();
			result.put("msg", "가입 신청이 완료되었습니다.\\n가입 승인 후 로그인해 주세요.");
			result.put("sta", "success");
			
			return result;
		}else { //고객 등록 실패
			Map<String, Object> result = new HashMap<>();
			result.put("msg", "가입 신청에 실패했습니다.\\n,다시 신청해 주세요.");
			result.put("sta", "fail");
			return result;
		}
	
	}
	
		
}
