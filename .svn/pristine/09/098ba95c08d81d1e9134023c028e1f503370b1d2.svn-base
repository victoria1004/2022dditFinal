package kr.or.ddit.user.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;

import kr.or.ddit.user.service.GetUserService;
import kr.or.ddit.user.vo.MemberVO;
/**
 * 사용자 목록 출력 및 사용자, 관리자 권한 부여하는 컨트롤러
 * @author 정신애
 *
 */
@RequestMapping("/user")
@Controller
public class GetUserController {

	private static final Logger logger = LoggerFactory.getLogger(GetUserController.class);
		
	@Autowired GetUserService service;
	
	@GetMapping("/userModal.do")
	public String userModal() {
		return "user/userModal";
	}
	
	/**
	 * 모달 창으로 회원 검색 시 모든 회원 목록을 가져오는 메서드
	 * @param model, keyword : 회원 이름 검색
	 * @return 모든 회원 목록
	 */
	@ResponseBody
	@GetMapping("/getUser")
	@RequestMapping(value="/getUser.do",method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	public List<MemberVO> getAllUsers(@RequestParam(required = false) String keyword){		
		return service.getAllUsers(keyword);
	}
	
	/**
	 * ajax로 선택한 멤버들을 받아온다.
	 * @param data : ajax로 보내온 선택된 멤버들의 id목록
	 * @return 선택한 id값들의 배열
	 */
	@ResponseBody
	@PostMapping("/addMember")
	@RequestMapping(value="/addMember", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public List<MemberVO> addMember(@RequestParam Map<String, Object> data){
		logger.info("data>>>" + String.valueOf(data.get("data")));
		
		List<MemberVO> list = new ArrayList<MemberVO>();

		Gson gson = new Gson();
		
		List<String> strList = gson.fromJson((String) data.get("data"), List.class);
		
		for(String str2: strList) {
			MemberVO vo = new MemberVO();
			vo = service.getUser(str2);
			list.add(vo);
		}
		return list;
	}
	
	
	/**
	 * 관리자가 사용자 승인/미승인 하는 화면
	 * @return 관리자의 승인/미승인 뷰 
	 */
	@GetMapping("/approvedUser.do")
	public String approvedUser() {
		return "user/approvedUser";
	}
	
	/**
	 * 승인회원 목록 가져오기
	 * @param keyword : 검색한 이름
	 * @return 승인된 회원의 전체 목록
	 */
	@ResponseBody
	@RequestMapping(value="/getM02Users", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public List<MemberVO> getM02Users(@RequestParam (required = false) String keyword){
		Map<String, String> map = new HashMap<String, String>();
		map.put("keyword", keyword);
		if(keyword != null | keyword != "") {
			map.put("keyword", keyword);
		}
		return service.getM02Users(map);
	}
	
	/**
	 * 미승인회원 목록 가져오기
	 * @param keyword : 검색한 이름
	 * @return 미승인된 회원의 전체 목록
	 */
	@ResponseBody
	@RequestMapping(value="/getM03Users", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public List<MemberVO> getM03Users(@RequestParam (required = false) String keyword){
		Map<String, String> map = new HashMap<String, String>();
		if(keyword != null | keyword != "") {
			map.put("keyword", keyword);
		}
		return service.getM03Users(map);
	}
	
	/**
	 * 미승인 <-> 승인 목록 사이에서 드래그 앤 드롭으로 사용자의 승인 상태 업데이트
	 * @param map : mbrId 드래그앤드롭한 사용자의 id, mbrCtgrCd = M03 또는 M02
	 * @return update의 결과 (0 또는 1 반환)
	 */
	@ResponseBody
	@PostMapping("/updateUsersStts")
	public int updateUsersStts(@RequestParam Map<String, String> map) {
		return service.updateUsersStts(map);
	}
	
	
	
	
	
	
}
