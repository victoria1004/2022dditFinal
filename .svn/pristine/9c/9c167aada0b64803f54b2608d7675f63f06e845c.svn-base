package kr.or.ddit.feed.controller;

import java.io.UnsupportedEncodingException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import kr.or.ddit.feed.service.LikesService;
import kr.or.ddit.feed.service.PstService;
import kr.or.ddit.feed.vo.LikesVO;
import kr.or.ddit.feed.vo.PstCmntVO;
import kr.or.ddit.feed.vo.PstVO;

@RequestMapping("/feed")
@Controller
public class PstController {
	private static final Logger logger = LoggerFactory.getLogger(PstController.class);

	@Autowired
	PstService pstService;
	@Autowired
	LikesService likesService;
	
	// 피드 목록
	@GetMapping(value="/main.do")
	public String select(Model model, @RequestParam(defaultValue = "1") String pjtNo, @RequestParam(defaultValue = "A001") String mbrId) {
//		logger.info("등록");
		logger.info("pjtNo : " + pjtNo);
		logger.info("mbrId : " + mbrId);
		
		List<PstVO> list = pstService.select(pjtNo);
		logger.info(">>>>" + list.size());
		
		//좋아요 확인
		List<LikesVO> like = likesService.findLikes(mbrId);
		logger.info("like",like);
		
		for(int i = 0 ; i < list.size(); i++) {
			//피드별 좋아요 개수
			int count = likesService.selectLikes(list.get(i).getPstNo());
			list.get(i).setCount(count);
			list.get(i).setYn(false);
			for(int j = 0; j<like.size(); j++) {
				if(list.get(i).getPstNo().equals(like.get(j).getPstNo())) {
					list.get(i).setYn(true);
					break;
				}
			}
		}
		
		//피드별 댓글 목록
//		for(int i = 0; i < list.size(); i++) {
//			List<PstCmntVO> cmnt = pstService.cmntList(list.get(i).getPstNo());
//			list.get(i).setYn(false);
//			if(list.get(i).getPstNo().equals(cmnt.get(i).getPstNo())){
//				list.get(i).setYn(true);
//				break;
//			}
//		}
//		model.addAttribute("list", list);
//		model.addAttribute("like", like);
		
		return "feed/main";

	}

	// 피드 등록
	@RequestMapping("/insert.do")
	public String insert(Model model, HttpServletRequest req) {
		try {
			req.setCharacterEncoding("UTF-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		logger.info("insert----------------------------------");
//		logger.info("등록");
		model.addAttribute("pstVO", new PstVO());
		// forwarding
		return "feed/main";
	}

	@RequestMapping(value = "/insert.do", method = RequestMethod.POST)
	public String insertPost(PstVO pstVO) {
		logger.info("insertPost----------------------------------");
		try {
			pstVO.setPstCn(new String(pstVO.getPstCn().getBytes("8859_1"), "UTF-8"));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		logger.info("pstCn : " + pstVO.getPstCn());
		
		int insertRes = this.pstService.insert(pstVO);
		logger.info("insertres :" + insertRes);

		if (insertRes < 0) { // 등록 실패 시
			return "feed/main";
		}
		return "redirect:/feed/main.do";

	}

	// 피드 수정하기
	@ResponseBody
	@RequestMapping(value = "/update.do", method = RequestMethod.POST)
	public String updatePost(@RequestParam String pstCn, String pstNo) {
		logger.info("------------------------------");
//		logger.info("수정");
		logger.info("update pstCn : " + pstCn);
		logger.info("update pstNo : " + pstNo);
		PstVO pstVO = new PstVO();
		pstVO.setPstNo(pstNo);
		pstVO.setPstCn(pstCn);

		int updateRes = this.pstService.update(pstVO);
		if (updateRes < 0) { // 수정 실패 시
			return "feed/main";
		}
		return "redirect:/feed/main.do";
	}

	// 피드 삭제하기
	@RequestMapping(value = "/delete.do", method = RequestMethod.POST)
	public String delete(@RequestParam String pstNo) {
//		logger.info("삭제");		
		logger.info("delete pstNo : " + pstNo);

		int deleteRes = this.pstService.delete(pstNo);
		if (deleteRes < 0) { // 삭제 실패 시
			return "feed/main";
		}
		return "redirect:/feed/main.do";

	}

}
