package kr.or.ddit.project.controller;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import kr.or.ddit.project.ArticlePage;
import kr.or.ddit.project.service.ProjectService;
import kr.or.ddit.project.service.ReportService;
import kr.or.ddit.project.service.impl.ProjectServiceImpl;
import kr.or.ddit.project.vo.ProjectVO;
import kr.or.ddit.project.vo.ReportVO;
import kr.or.ddit.project.vo.TrsmFileVO;
import kr.or.ddit.user.service.LoginService;
import kr.or.ddit.user.vo.MemberVO;

@RequestMapping("/project")
@Controller
public class ReportController {
	private static final Logger logger = LoggerFactory.getLogger(ReportController.class);
	
	@Autowired
	ReportService reportService;
	@Autowired
	LoginService loginService;
	@Autowired
	ProjectService service;
	
	//업무보고 목록
	@GetMapping("/report.do")
//	http://localhost/project/report.do?currentPage=1&pjtNo=1&keyword=
	public String reportList(Model model, HttpSession session, @RequestParam String pjtNo
			, @RequestParam(defaultValue = "1", required=false) int currentPage
			, @RequestParam(defaultValue = "10", required=false) int size
			, @RequestParam(required=false) String keyWord) {
		
		logger.info("파라미터로 받은 키워드 :"+keyWord);
		
		//세션에 member객체 세팅
		MemberVO memberVO = (MemberVO) session.getAttribute("member");
		MemberVO member = this.loginService.loginPost(memberVO);
		session.setAttribute("member", member);
		logger.info("피드 세션 member: " + member.toString());
		
		//세션에 project세팅
		ProjectVO vo = service.getPjt(pjtNo);
		session.setAttribute("project", vo);
		logger.info("프로젝트 세션 project :", vo.toString());
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("pjtNo", pjtNo);
		map.put("currentPage", currentPage);
		map.put("size", size);
		map.put("keyWord", keyWord);
		
		int total = reportService.reportTotal(map);
		//페이징 처리
		List<Map<String, Object>> repList = reportService.reportList(map);
//		List<List<Map<String, Object>>> lists = Lists.partition(repList, size);
		model.addAttribute("list", new ArticlePage(total, currentPage, size, 5, repList));
		model.addAttribute("total", total);
		
		return "project/reportMain";
	}
	
	//업무보고 작성화면
	@GetMapping("/reportInsert.do")
	public String reportInsert(HttpSession session, @RequestParam String pjtNo) {
		return "project/reportInsert";
	}
	
	//업무보고 작성 완료 시
	@PostMapping("/rptInsertPost.do")
	public String rptInsertPost(HttpSession session, @RequestParam String pjtNo,
			@RequestParam String rptCtgrNm, @RequestParam String rptTtl, @RequestParam String rptCn,
			@RequestParam(defaultValue = "1", required=false) int currentPage, 
			@RequestParam(defaultValue = "10", required=false) int size,
			@RequestParam String rptWrtrId, MultipartFile[] uploadFile) {
		
		logger.info("form으로 보낸 pjtNo"+pjtNo);
		logger.info("form으로 보낸 rptCtgrNm"+rptCtgrNm);
		
		ReportVO vo = new ReportVO();
		
		//report객체 생성 후 파라미터로 받은 값 넣어주기
		vo.setPjtNo(pjtNo);
		vo.setRptCtgrNm(rptCtgrNm);
		vo.setRptWrtrId(rptWrtrId);
		
		//form에서 multipart/form-data로 보낼 시 한글 깨짐현상  처리
		String ttl;
		String cn;
		try {
			ttl = new String(rptTtl.getBytes("8859_1"), "UTF-8");
			cn = new String(rptCn.getBytes("8859_1"), "UTF-8");
			logger.info("form으로 보낸 rptTtl"+ttl);
			logger.info("form으로 보낸 rptCn"+cn);
			vo.setRptTtl(ttl);
			vo.setRptCn(cn);
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		logger.info("form으로 보낸 rptWrtrId"+rptWrtrId);
		logger.info("form으로 보낸 uploadFile"+uploadFile);
		
		int result = reportService.reportInsert(vo);
		if(result > 0) {
			logger.info("db에 업무보고넣기 성공");
		}else {
			logger.info("db에 업무보고넣기 실패");
		}

		TrsmFileVO trsmVO = new TrsmFileVO();
		//방금 넣은 report의 번호를 뽑자
		String getRptNo = reportService.selectRptNo();
		logger.info("getRptNo"+getRptNo);
		trsmVO.setRptNo(getRptNo);
		
		//업로드 시 사용될 폴더
		String uploadFolder = "D:/A_TeachingMaterial/7.LastProject/workspace/doIT/src/main/webapp/resources/TrsmFile";
		
		for(MultipartFile multipartFile : uploadFile) {
			logger.info("파일명 : " + multipartFile.getOriginalFilename());
			logger.info("파일크기 : " + multipartFile.getSize());
			
			//UUID 파일명 처리 시작
			//동일한 이름으로 업로드되면 기존 파일을 지우게 되므로 이를 방지하기 위함
			UUID uuid = UUID.randomUUID();
			String fileNm = uuid.toString() + "_" + multipartFile.getOriginalFilename();
			File saveFile = new File(uploadFolder, fileNm);
			
			try {
				//파일 실제명을 담기
				trsmVO.setTrsmFileNm(multipartFile.getOriginalFilename()); //파일 실제 이름을 vo에 저장
				//파일 저장 경로 담기
				trsmVO.setTrsmFileAddr(saveFile.getPath());
				
				//transferTO() : 물리적으로 파일 업로드가 됨
				multipartFile.transferTo(saveFile);
				
				//DB에 넣기
				logger.info("trsmVO는 :"+trsmVO.toString());
				int trsmInsert = reportService.trsmFileUpload(trsmVO);
				
				if(trsmInsert > 0) {
					logger.info("첨부파일 업로드 성공");
				}else {
					logger.info("첨부파일 업로드 실패");
				}
				
			}catch(Exception e){
				logger.info(e.getMessage());
			}
			
		}
		return "redirect:/project/report.do?currentPage=1&pjtNo="+vo.getPjtNo()+"&keyword=";
	}
	
	//업무보고 상세 페이지
	@GetMapping("/reportDetail.do")
	public String reportDetail(HttpSession session, Model model, @RequestParam String pjtNo, @RequestParam String rptNo) {
		List<Map<String,Object>> repDetail = reportService.reportDetail(rptNo);
		
		//해당 프로젝트 번호의 구성원 넣기
		List<Map<String, Object>> member = service.allPrtpnt(pjtNo);
		
		logger.info("프로젝트 구성원 꺼내자 :" + member.toString());
		
		model.addAttribute("pjtMem", member);
		model.addAttribute("detail", repDetail);
		return "project/reportDetail";
	}
	
	//첨부파일 다운로드
//	@GetMapping("/reportDownload.do")
//	public void reportDownload(HttpServletRequest request, HttpServletResponse response, @RequestParam String rptFileNm) throws Exception {
//		request.setCharacterEncoding("UTF-8");
//		
//		
//		
//	}
	
	//업무보고 수정 페이지
	@GetMapping("/reportUpdate.do")
	public String reportUpdate(HttpSession session, Model model, @RequestParam String pjtNo, @RequestParam String rptNo) {
		List<Map<String,Object>> repDetail = reportService.reportDetail(rptNo);
		model.addAttribute("list", repDetail);
		return "project/reportUpdate";
	}
	
	//업무보고 수정 완료 시
	@PostMapping("/rptUpdatePost.do")
	public String rptUpdatePost(HttpSession session, @ModelAttribute ReportVO reportVO, @RequestParam String pjtNo) {
		logger.info("form으로 보낸 업뎃vo"+reportVO.toString());
		int res = reportService.reportUpdate(reportVO);
		return "redirect:/project/report.do"; 
	}
	
	//PL의 업무보고 승인/반려
	@PostMapping("/rptConfirm.do")
	public String rptConfirm(HttpSession session, @RequestParam String pjtNo, @RequestParam String rptStts, @RequestParam String rptNo) {
		logger.info("pl이 보낸 승인 여부" + rptStts);
		
		ReportVO reportVO = new ReportVO();
		reportVO.setRptStts(rptStts);
		reportVO.setRptNo(rptNo);
		
		int upStts = reportService.reportConfirm(reportVO);
		return "redirect:/project/report.do";
	}
	
	//업무보고 삭제
	@ResponseBody
	@PostMapping("/reportDelete.do")
	public String reportDelete(HttpSession session, @RequestParam String rptNo) {
		logger.info("ajax으로 보낸 rptNo"+rptNo);
		int res = reportService.reportDelete(rptNo);
		return "redirect:/project/report.do";
	}
	
}
